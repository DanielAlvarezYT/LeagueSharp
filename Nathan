public static void Obj_AI_Base_OnProcessSpell(Obj_AI_Base enemy, GameObjectProcessSpellCastEventArgs Spell)
        {
            if (enemy.IsMe)
                return;
            if (enemy.IsChampion() && enemy.IsEnemy)
            {
                if (Spell.SData.Name.ToLower() == "luxmalicecannon" || Spell.SData.Name.ToLower() == "lux malice cannon" || Spell.SData.Name.ToLower() == "luxmalicecannonmis" || Spell.SData.Name.ToLower() == "lux malice cannon mis" || Spell.SData.DisplayName.ToLower() == "finalspark")
                {
                    var rectangle = new Geometry.Polygon.Rectangle(Spell.Start, Spell.End, 50);
                    if (rectangle.IsInside(Player))
                    {
                        if (Player.ChampionName == Shaco)
                        {
                            ShacoQ.Cast(Player.Position);
                        }
                        if (Player.ChampionName == Nocturne)
                        {
                            NocR.Cast();
                        }
                        if (Player.ChampionName == Graves && enemy.IsValidTarget(950f))
                        {
                            GravesW.Cast(enemy.Position);
                        }
                        if (Player.ChampionName == KhaZix)
                        {
                            KhaR.Cast();
                        }
                    }
                    foreach (var ally in ObjectManager.Get<Obj_AI_Hero>().Where(ally => rectangle.IsInside(ally)))
                    {
                        if (Player.ChampionName == Graves && Menu.Item("ProtectAllyGraves").GetValue<bool>() && enemy.Distance(Player) < 950f)
                        {
                            GravesW.Cast(enemy.Position);
                        }
                        if (Player.ChampionName == Nocturne && Menu.Item("ProtectAllyNoc").GetValue<bool>())
                        {
                            NocR.Cast();
                        }
                    }
                }
            }
        }
